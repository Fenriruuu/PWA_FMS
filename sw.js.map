{"version":3,"sources":["../public/sw.js"],"names":[],"mappings":"AAAA,cACI,yEACJ,EAGA,GAAI,GAEJ,OAAO,iBAAiB,sBAAuB,AAAC,GAAM,CAEpD,EAAE,eAAc,EAEhB,EAAiB,EAEjB,uBAEA,QAAQ,IAAI,wCAAwC,CACtD,CAAC,EAED,cAAc,iBAAiB,QAAS,SAAY,CAEhD,uBAEA,EAAe,OAAM,EAErB,KAAM,CAAE,WAAY,KAAM,GAAe,WAEzC,QAAQ,IAAI,wCAAwC,GAAS,EAE7D,EAAiB,IACrB,CAAC,EAED,OAAO,iBAAiB,eAAgB,IAAM,CAE1C,uBAEA,EAAiB,KAEjB,QAAQ,IAAI,mBAAmB,CACnC,CAAC,EAYD,OAAO,WAAW,4BAA4B,EAAE,iBAAiB,SAAU,AAAC,GAAQ,CAChF,GAAI,GAAc,UAClB,AAAI,EAAI,SACN,GAAc,cAGhB,QAAQ,IAAI,uBAAwB,CAAW,CACnD,CAAC,EAED,QAAQ,WAAW,iBAAiB,waAAK,eAAiB,CAAA,CAAE","file":"sw.js","sourcesContent":["importScripts(\n    'https://storage.googleapis.com/workbox-cdn/releases/6.5.4/workbox-sw.js'\n);\n\n// Initialize deferredPrompt for use later to show browser install prompt.\nlet deferredPrompt;\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  // Prevent the mini-infobar from appearing on mobile\n  e.preventDefault();\n  // Stash the event so it can be triggered later.\n  deferredPrompt = e;\n  // Update UI notify the user they can install the PWA\n  showInstallPromotion();\n  // Optionally, send analytics event that PWA install promo was shown.\n  console.log(`'beforeinstallprompt' event was fired.`);\n});\n\nbuttonInstall.addEventListener('click', async () => {\n    // Hide the app provided install promotion\n    hideInstallPromotion();\n    // Show the install prompt\n    deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    const { outcome } = await deferredPrompt.userChoice;\n    // Optionally, send analytics event with outcome of user choice\n    console.log(`User response to the install prompt: ${outcome}`);\n    // We've used the prompt, and can't use it again, throw it away\n    deferredPrompt = null;\n});\n\nwindow.addEventListener('appinstalled', () => {\n    // Hide the app-provided install promotion\n    hideInstallPromotion();\n    // Clear the deferredPrompt so it can be garbage collected\n    deferredPrompt = null;\n    // Optionally, send analytics event to indicate successful install\n    console.log('PWA was installed');\n});\n\nfunction getPWADisplayMode() {\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    if (document.referrer.startsWith('android-app://')) {\n      return 'twa';\n    } else if (navigator.standalone || isStandalone) {\n      return 'standalone';\n    }\n    return 'browser';\n}\n\nwindow.matchMedia('(display-mode: standalone)').addEventListener('change', (evt) => {\n    let displayMode = 'browser';\n    if (evt.matches) {\n      displayMode = 'standalone';\n    }\n    // Log display mode change to analytics\n    console.log('DISPLAY_MODE_CHANGED', displayMode);\n});\n\nworkbox.precaching.precacheAndRoute(self.__WB_MANIFEST || []);"]}